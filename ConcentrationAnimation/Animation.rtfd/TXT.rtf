{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{check\}}{\leveltext\leveltemplateid1\'01\uc0\u10003 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{check\}}{\leveltext\leveltemplateid101\'01\uc0\u10003 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid302\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\qc\partightenfactor0
\ls1\ilvl0
\f0\fs24 \cf0 {\listtext	
\f1 \uc0\u10003 
\f0 	}
\b Kinds of Animation\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 {{\NeXTGraphic Screenshot 2019-04-16 at 4.08.03 PM.png \width14440 \height8040 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 \
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 1)
\b  Animating UIView properties 
\b0 :- that you can animating the changing of view properties\
\
2)
\b Animating controller transitions
\b0  :-  This is like you are  in the
\b  navigation controller
\b0  and a new card comes on top of the deck.
\b The animation of that sliding in or popping in or flipping in or whatever
\b0  , that can be animated . (Do RnD  not taught this is advanced animation )\
\
3)
\b Core Animation
\b0  :- Just like there's a CA layer underneath UI for drawing  \
there's kind of
\b  core animation under this UIView property animation at the top
\b0 .\
It's basically the 
\b primitives for animating properties
\b0 .It can animate more than just the UIView properties \
(do RnD on this too and CALayer too)\
\
4
\b )OpenGL and Meta
\b0 l  :- If you are 
\b doing 3D
\b0  (there's a full 3D animation engine OpenGL and also Metal) (RnD on getting OpenGl to your view)\
\
5)
\b SpriteKit 
\b0 :- a whole framework for doing 
\b 2.5D animation
\b0  , basically that's like Mario Brothers kind of animation(
\b where you have images and they are overlapping to create what appears to kinda be a 3D world, but its really drawn on 2D , where the images just overlap
\b0 ) (RnD on that too)\
\
6
\b ) Dynamic Animation 
\b0 :- this is 
\b animating views using physics
\b0 . So you give the
\b  view a mass and a velocity and a elasticity then you operate on it. you push it
\b0 . for example and it will just start flying across the screen and depending on what it's mass is and what it collides with it will bounce around and do various things. It's really great for kind of moving views at on math and having them interact with each other. When you slide up from the bottom on your iPhone and it kind of bounces a little bit that's the dynamic animation.It's just kind of a little bit of elasticity and bounce .\
\
\
\
\
\
\
\
\
\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\qc\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	
\f1 \uc0\u10003 
\f0 	}UIView Animation properties (i.e. View properties that can be used for animating view)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\qc\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\qc\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2019-04-16 at 4.08.29 PM.png \width15100 \height5800 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\qc\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	\uc0\u8226 	}Changes to certain UIView properties can be animated over time\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1\cf0 {\listtext	\uc0\u8259 	}just properties above on yellow  like where it is? its center or the transform  or alpha how transparent it is making things fade in or out or the background color , which is rare to animate. These properties and these properties alone you can animate so that your view can fly across screen.It can fade out or it can flip around because it can transformed can be changed . It can scale up and get big and then go back small because its scale , the transform scale can be changed.\
{\listtext	\uc0\u8259 	}So there's a whole API for animating these things\
{\listtext	\uc0\u8259 	}
\b That is you can animate this yellow property in you view.\
{\listtext	\uc0\u8259 	}This are the only things you can animate using this UIView property animation mechanism . But it's pretty powerful .You got the frame the center that animating the position of the view , you got the bounds which will animate the size of the view although only in a transient way because it's the frame  that determines where you are. So if your going to make it larger it occupies more space in superview you have to set the frame . \
{\listtext	\uc0\u8259 	}The transform is super powerful we saw that with the card where we rotated the corner upside down. So can do rotation , you could also do scaling with it , in fact that's probably a better way to do scaling than  trying to mock with your bounds. \
{\listtext	\uc0\u8259 	}And then an opacity, another good one ,fading views in and out, appearing and disappearing\
{\listtext	\uc0\u8259 	} and background color (we almost never do that but we can do that.)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2019-04-16 at 4.33.31 PM.png \width14900 \height3320 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	\uc0\u8226 	}Done with UIViewPropertyAnimator using closure\
\pard\tx940\tx1440\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}So the way this work is a class called UIViewPropertyAnimator and it works with closures .\
{\listtext	\uc0\u8259 	}And basically the way it works is you set a bunch of things on your property animator the UIViewPropertyAnimator to say what kind of animation you want.\
{\listtext	\uc0\u8259 	}How long it's gonna take what curve of going through the process quickly or slowly it's gonna do. If wanna delay before you start. All these kinds of things you set that up and then you give it a closure. and inside that closure it just code that modifies these properties.So that's it then it will animate those changes that you asked for in the fashion that you described. this is super simple way to animate these properties in a view . \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2019-04-16 at 5.15.23 PM.png \width14760 \height6360 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\
Let's take a look at what it looks like to call it.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 UIViewPropertyAnimation has a great power. you can create these animations.You can scrub them backwards and forwards.You can have them with auto-repeat and reverse
\b0  and do all these things.\

\b Simplest way to use
\b0  it is which is class method
\b  runningPropertyAnimator.
\b0 \
This thing creates a property animator that will immediately start running.Now the arguments to it are very simple.\
\
 
\b withduration
\b0  ("is just how long the animation is going to take to happen ."  . So you can make it a one second animation, or a ten second , solely up to you)\
\

\b Delay
\b0  ("how long to wait before you start this animation") . Why would you wanna delay the starting animation?Well maybe you got some other animation going on you wanna wait sometime for definition although\
there's ways to chain animations too, so that when one finishes you start another one but it might delay for that reason\
\

\b options
\b0  ()\
\

\b animations
\b0  ("how you want your animations to run")\
\

\b closure
\b0  
\b (its takes no arguments and returns no arguments and you put the code that's gonna modify those properties in there and then there's a completion closure (this will get called when the animation actually finishes running) and that completion one has an argument there which is position either start because you might be running this animation backwards or it's the end so the animation got all the way to the end Or if the animation got interrupted in the middle then the position will be called current (which is an enum .current)) Why would an animation get interrupted in the middle ? You start another animation that animates ones of the same properties. Then that animation wins and if it start's taking over.\
Now you can have multiple of these property animators going side by side .All modifying different properties, but once one starts to pick on the properties of another one the later one starts to win and take over. Okay and then this one will stop , go to say's its complete with the current position . \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Now something very important to understand conceptually about How animation's work?\
e.g. of calling this runningPropertyAnimator \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 t
\b hat closure that you passed to it gets executed immediately. It does not take five seconds or ten seconds or however long for that closure to execute.It executes immediately and takes effect immediately.\
So the animation is only what the user is seeing . The user is seeing your  animation happen over five or ten seconds but actually it happened the instant you started animation.\
okay there's a difference going on here. There's the reality which is in your code . That happens instantly , then there's the presentation of it that happens to the user.That's what happens overtime.\
So  this can be confusing because you might have an animation that you set to take go off in 2 seconds and it starts running for 2 seconds and you know you are thinking yeah my animation when it's done my frame or my center or my alpha will be changed . But no the instant  you started that animator it got that stuff changed. \

\b0 So you have to think about these 2 timeframes this is what makes animations somewhat difficult, this thinking about them what we call the model but has nothing to do with model view controller. But you know the actual reality in your code and then the presentation in your code which is a different thing that's what the users seeing
\b \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 {{\NeXTGraphic Screenshot 2019-04-16 at 5.36.53 PM.png \width14300 \height8160 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
So here we are taking a view that's fully opaque and We gonna fade it out and then when it's gone I am gonna remove it from superview. So this is basically make a view disappear from screen animation\
So first we are just checking to make sure that i am fully opaque , if my alpha is 1 then I am calling the animator here.\
This animation is gonna take 3 seconds to fade out  and its not gonna start until 2 seconds from now.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 (*****)options : [.allowUserInteraction] which means that as it's fading out , gestures and stuff will still work on it. otherwise if you don't specify this then as animations happening  this kind of animation , you won't be able to tap on things or whatever.
\b0 \
\
animations : My animation is just setting my transparency to zero fully transparent . So that happens immediately when I call this method.This method runningPropertyAnimator return immediately having executed that closure immediately. \
And then I have a completion if the thing gets to the end without being interrupted in other words I do fade all the way out to 0 then I' am going to remove myself from superview that's what this little completion closure are all about.\
\

\b But notice I put print("alpha = \\(myView.alpha)") that's gonna say alpha equals 0 . because even though it's gonna take five seconds for  that alpha to go to zero it goes to zero immediately because I executed this animation.
\b0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
What are some of the options that you can do when you are doing these animations ? \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2019-04-16 at 5.51.37 PM.png \width15200 \height7240 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\
 beginFromCurrentState :- is if you are animating some property and then you start another animation that animates the same property does it start from the real value of the property, which is what it got set to like alpha equals zero !! So it does jump to transparent and start animating from there? or does it pick up from wherever that other animation was? This is really , do you use the state of alpha that is being animated or do you use the real state of alpha which is what's in the code which using our previous slide  would be zero. Okay so this is kinda like picking up or just using the real version. We do this quite bit if we have overlapping animations that are doing the same property by different animations.\
\
repeat and autoreverse :- So we can have animations that can go forwards and  backwards and forwards and backwards.It's kinda in a loop\
\
curveEaseIn :- that's just saying when you move the thing does it move linearly?  that's curve linear which would be like it would move like hmm like that \
or does it  kind of ease in slowly and then pick up speed and then slow down at the end?\
Now why would you want to do that?. Well things that move like very linearly feel kind of robotic and mechanical. Things that ease in and then ease out feel a little more like someone picked them up and move them over and put them down. You it is just kind of more natural movement. So like moving things you almost always want curve ease in , or ease out.\
But other one's like maybe fading out to alpha ,maybe you don't need that you can just linearly fade out.\
\
UIViewAnimation you can only animate those properties . It has plenty of methods including (
\b runningPropertyAnimator
\b0 ) we just saw it. (RnD on it too)\
\
\
\
\
\
\
Animating an entireView change.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2019-04-18 at 10.55.01 AM.png \width14900 \height4100 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2019-04-16 at 6.55.46 PM.png \width14900 \height5440 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\
\
So got an view and its gonna completely change the way it looks and you wanna animate that in someways and there's limited ways to do that.\
The classic example of this is a playing card . when a playing card is face down it looks like the "standford logo" or it's a back of card. \
when it's face up it's got pips and corners and all of that stuff.\
Okay well when i wanna flip my card over i could just change it immediately and it would just change back and forth starkly , but this allows me to actually flip it over ,\
 like a 3D looking flip and you can also cross dissolve from one thing to another.\
Those are the 2 major things you can do here.\
There's
\b  curl up from the bottom too,
\b0  which makes it like it's curling up, and you are looking at a piece of paper behind it and that's the new version.But that's only for the views that fill the whole screen.that's not for or it doesn't really work when a view inside another view.It kinda of doesn't feel right.\
So this is for transitioning just smoothing out or animating the complete change to a view.Playing card being the classic example.\
\
here's how you call it.You would use this method in UIView. It's a class method  called transition(with : view) and again you give again duration you give the option, same UIViewAnimationOptions with extra options like transition flip from left  which means flip this thing from left edge. You can also have flip from top , flip from bottom and cross dissolve those kind of things .\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 animation block  you are not limited to just changing view properties you can change anything you want that's going to make that thing look different. and \
then so what the animation system does is , it draw your view before this closure, \
then it executes closure \
draws the view after \
and then it just flips it over or cross dissolves it,
\b0 \
 This is kinda simple animator for big changes.\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\qc\partightenfactor0

\b \cf0 Dynamic Animation\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 little more powerful, little more complicated dynamic animation and  It's a little approach to animation.Here we are gonna setup physics attributes on our views and then just tell them to go what they do.So we are talking physics like density , friction , gravity stuff like that. you put them on there and then they just start moving because physics it works.So let's take a look at how you make this happen.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 Let's see how to make this things happen.\
3 Steps to make it happen\
\
\
\
\
(1)
\b  You need a animator  
\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2019-04-18 at 11.10.09 AM.png \width14680 \height3640 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
(this is just a thing that drives the animation)(It's an instance of class  UI dynamic animator)\
(It only takes only one argument in its initializer which is the view that is going to be the reference coordinate system for all animations that's going on and only requirement for this view or any view in your app it just has to be a superview or superview of the superview i.e. it has to be at the top of the view hierarchy of all the views that animator is going to animate those view don't all have to be in the same view they could be in subviews of other views as long as they all are  eventually have this reference view as a super view)\
So lot of times people want to make their whole viewcontrollers view \
It's better to stay lower down in hierarchy because it can be more object oriented to have animation code down where  it's actually happening instead of putting everything up in the controller but i will say btw 
\b their is a tendency you probably have is like a beginner iOS people  to put everything in your viewcontroller when maybe it's want to be down level in a view or a customview.
\b0 \
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 (2) create behaviours\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 {{\NeXTGraphic Screenshot 2019-04-18 at 11.16.06 AM.png \width14460 \height5260 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
so this is describing how the things in  this view behave and so we are talking about "gravity" and whether things collide with eachother stuff like that those are behaviours and you add the behaviour to the animator .\
So animator has to addBehavior()\
You call it after creating an behavior and just add it.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 As soon as you add that behavior
\b0 .
\b That animator will start enforcing that behavior 
\b0 whatever it is gravity or collisions or whatever but there's no items yet  that are being affected by the behaviors\
\

\b (3) Add items to the behaviors\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 {{\NeXTGraphic Screenshot 2019-04-18 at 12.31.27 PM.png \width13520 \height5260 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 \
The instant you add an item to a behavior it will start being affected  by the behavior assuming
\b0  it's in an in an animator and UIViews are the items here but actually there's not UIView it's any object that implements protocol 
\b UIdynamicItems
\b0  which doesn't have to be a view.
\b \
But UIViews are 99% what we pass as items to these behaviors 
\b0 so if I say gravity add item "item1".\
Item 1 will immediately start feeling the pull of gravity \
If I say collider addItem item one immediately item 1 will start colliding with everything else that is added as an item in collider\

\b So you don't say go it's just go   , It's just like as soon as you add an item it starts being affected by that behavior and if you remove an item  it instantly stops being affected by that behavior.\
\
So its create an animator , add behaviors to animator now add items to the behavior\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 {{\NeXTGraphic Screenshot 2019-04-18 at 12.50.16 PM.png \width13420 \height7360 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 \
\
UiDynamic item protocol that view implements , view actually implemented 3 of them automatically
\b0  it had already had a bound, center and transform so it automatically implemented those  and then the other  2 are just really simple things happens do with collision\
But you can see by what's in the dynamicItem protocol what the animation system is able  to animate it's able to animate size through the bounds,\
it's able to animate the position through the center\
and it's able to animate the transform so it can rotate and scale and do anything it want pretty much in that front and it tends to mostly use transform and center to do its animation\
the bounds if you notice is read only so the bounds is just for the views  they can obviously look at their own bounds when they are drawing and stuff the
\b  animator doesn't actually change the bounds\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 Mostly doing center and transform\
\
Btw if you give an object to the animator by making a behavior operate on it. Really animator kinda owns it's it own center and transform as it's going change it around\
So if you wanted to change center or transform of the view you already gave to a behavior then you have to call this method in your dynamic animator which is 
\b updateItemUsingCurrentState(item:UIDynamicItem)
\b0 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 In other words I change to the center or the transform  please  Mr. animator take that state and so the animator would take that state move the object would change this transform and then start behaving on it again keep going forward behaving from there .\
\
\
\
\
\
\
\
\
\
\
\
\
\
So lets talk about some of the behavior you can have.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 {{\NeXTGraphic Screenshot 2019-04-18 at 1.13.10 PM.png \width14800 \height6680 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 \
(1)Gravity :- By default Default gravity is down meaning down towards the home button or bottom of the device \
(******)and the magnitude we sometimes call it G but it's not really G  . it's the magnitude of 1.0 is a thousand points per second per second(1000 points per second per seconds feels much like 9.8m/(s*s))\
That is I if put a object at the top of my screen and add it to a behavior with that gravity it falls at  about the same rate as  a real life object will fall .It's amazing that the round number end up like that \
\
also gravity doesn't have to be down you , you can make gravity go up or off to the right or left or anywhere you want.\
So can completely control what's going on with gravity \
\
\
\
(2)Attachment behavior really cool one it's essentially taking a like a think of it isn't like an ironbar  or a bar between either 2 items or between an item and a fixed point and that bar keeps those two items connected even as all the other behaviors work on it.\
So image you had 2 things  connected with attachmentBehavior so there they are behaving as if they are  attached to eachother and they start to fall because they are both being operated on by gravity. then let's say one of them collides with  something. That bar gonna make it so the other one which didn't collide is gonna swing like a pendulum becuase this one came down it collided and this one kept on going but the bar keeps them together\
and same thing if you attached it  to a fixed point and then you turn on gravity, It will start to fall down but then when it gets to the bottom it will start swinging like a pendulum and eventually gravity will pull it so that's straight down .\
You can also change the length of this bar while the animation is happening. So it's animating things are following bouncing off things colliding with things they are attached and you can make the bar get  closer together or farther apart you can also make bar kind of springy with certain amount of 
\i\b0 damping 
\i0 so that things hit something and they will come together and come back up to make their attachments be the right distance
\b \
\
\
\
\
\
\
\
\
\
(3)Collision behavior:-\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 {{\NeXTGraphic Screenshot 2019-04-18 at 5.50.01 PM.png \width13840 \height6120 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 \
\
Probably the most common behavior\
This is objects( UIView )bouncing into eachother  or bouncing off beizer path basically in the background\
 and you set this up by adding any fixed boundaries you want as bezier paths usually   and then adding items and you can control whether the items bounce of eachother or only off these boundaries is bezier paths issues you setup all these Beizer path are in the reference views coordinate system btw they are not actually drawn or anything they are just conceptually bound to boundaries in the space\
var translatesReferenceBoundsIntoBoundary  
\b0 you set that to true on a collision behavior then your reference views outer edges will become a boundary which is common that like you got things bouncing around in your reference view , they will stay mostly inside. Now 1 thing about collision boundaries oh lot of people think  oh if I put my reference  bounds  as a collision boundary then no object will ever get out i.e. it will never escape  but that's not true because I'm comfortable it move's so fast that in one animation  frame they move from being on one side of the boundary to the other and then the just fly off into the outer space they are  gone forever. \

\b So collision boundaries they only check for collision on each frame of the animation and so they are not a lockdown guarantee keep things inside if  you put a collision boundary around everything.
\b0 \
Collision boundaries will also have a delegate their delegate allows you to find out when collisions happen so if you set something to be a collision delegate you will get this methods like collision behavior began ,contact for some dynamic item with a boundary and an identifier with a name .\
btw notice the boundary identifier are of type
\b  NSCopying
\b0 \

\b (*****)    NSCopying(just means they are either NSNumber or an NSString)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 (******)So you can use as to turn them into a string or a double or an Int because we know that NSNumber and NSString can be like automatically 
\i as
\i0  to the
\b  
\b0 swift counterparts\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 (4) Snap Behavior
\b0  :-\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2019-04-18 at 5.57.51 PM.png \width13780 \height3220 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
Also very common this when you are using dynamic animation system , how you move something \
So you wanna move something someplace else and you are not doing view property animation here you are using dynamic animation.\
So you say snap to this point it's little better than the view property  one because when it snaps there it doesn't just jump right there or even ease out and  ease in there , it actually gets there and when it's there imagine it has 4 springs on the corner so its kind of comes in and vibrates a little okay so feels even more natural flying across the screen and stopping .\
\
\
\
\
\
(5)
\b  Push Behavior :-\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 {{\NeXTGraphic Screenshot 2019-04-18 at 6.07.49 PM.png \width13360 \height4960 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 It just pushes an object and you can either constantly push it or push it once like punch  it .\
And this is a interesting one as you can specify angle and the magnitude of the push \
The instantaneous one is kind of interesting because think about it this is a behavior that's added to an animator and this behavior only fires once.\
If it's instantaneous and then it's just sitting there doing nothing forever. \
So be nice if there was a way that we could add a push behavior and say after you fired please delete yourself because you have already done your work \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 (6)UIDynamicItemBehavior :-
\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2019-04-18 at 6.15.41 PM.png \width14220 \height7820 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
This is like a meta behavior . so this is a behavior where you specify things like friction , elasticity and whether you allow rotation of the view as it's bouncing off of things and this affects how all the other behaviors work if you add more friction then  obviously gravity pulls on things they move slow because they have friction.\
You can also ask the UIDynamicItemBehavior about all of it's items things like \
what's your current velocity\
how fast are you moving across the screen or even how fast are you spinning if you happen to be spinning how fast it that happening\
\
So UIDynamicItemBehavior we  almost always have all our items in a UIDynamicItemBehavior because we want to be able to set these various things about them \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 (7)UIDynamicBehavior
\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2019-04-18 at 6.27.39 PM.png \width14740 \height6540 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
Then there is 
\b UIDynamicBehavior 
\b0 which is superclass of all of these behaviors collision , gravity behavior all these things.\
Now you could subclass this and try and write your own behavior but writing a gravity behavior it's pretty hard  alot of math is involved there trying to make  that work but that's  not why you use a subclass of 
\b UIDynamicBehavior.\
What you do with UIDynamicBehavior 
\b0 is you collect other behaviors like collisions and gravity and all stuff into one behavior so that you have one behavior that you add your items to and it's got all these children's behaviors that are making it behave in all this way and way you do this is you call addChild behavior on yourself if your 
\b UIDynamicBehavior 
\b0 subclass and now causes that behavior to be your behavior.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 UIDynamicBehavior 
\b0 also has a var in it called  
\b dynamicAnimator
\b0  that is the animator you are currently being animated by if any.\
So you can look at this and find out am I currently being animated this behavior or is it not being animated and if it's being animated then by whom?\
It will even send you a message we will move to animator when you switch to a different animator usually when you go from not being animated to being animated or vice versa\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2019-04-18 at 6.39.13 PM.png \width15460 \height4340 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 UIDynamicBehavior 
\b0 has another awesome var that you inherit when you create a subclass or when the subclasses are created which is 
\b action
\b0 .\

\b So action is a closure that takes no arguments and return no arguments.
\b0 \
(*****)This closure gets executed everytime this 
\b UIDynamicBehavior  
\b0 acts.\
So like a push behavior that's instantaneous this gets called once because only once it act on an object\
But a collision behavior  is kind of always acting on the object or gravity behavior always.\
(****)So this thing it's getting called alot so never put any code in here that takes a long time to execute because it will slow your animation rate way down because these things are being called all the time  these actions closure.\
But they kind of useful for e.g. you might want to check in here has my view left the  building , you could look at  whatever the items of this behavior is acting on and did it cause this thing to go outside the reference bounds even or whatever so that you have to either put it back or maybe destroy it or something like that so again it only takes a couple of lines to check the bounds of your item against the reference bounds and see if anything's happened so that would be okay to put in an action now we are gonna use this action thing in a second to fix that push behavior problem \
\
\
\
\
\

\b Stasis of the animator 
\b0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2019-04-18 at 6.46.02 PM.png \width13840 \height4740 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
stasis(
\f2 \cf2 \expnd0\expndtw0\kerning0
a period or state of inactivity or equilibrium
\f0 \cf0 \kerning1\expnd0\expndtw0 )\
Really most of the time we design these animation mechanisms with all gravity and collision boundaries and physics and all that stuff's we design in a way that we except it to come to a stop .\
Then maybe a push happens and it goes back active again and then eventually it comes to a stop most of the time it's not required you could have a thing just constantly going all the time but usually you can push or whatever and it comes to a stop and so you can find out when it reaches stasis with the UIDynamicAnimator's delegate  which has these 2 methods\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 dynamicAnimatorDidPause(UIDynamicAnimator)\
dynamicAnimatorWillResume(UIDynamicAnimator)
\b0 \
\
and it will tell you I came to stasis I'm not currently moving anything and then something happens it will say I'm resuming because I have to move things\
\
\
\
\
\
}